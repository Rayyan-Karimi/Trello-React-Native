import { useEffect, useState } from "react";
import "./App.css";

const connectedTwoWords = [
  ["India", "New Delhi"],
  ["Indonesia", "Jakarta"],
  ["Iran", "Tehran"],
  ["Iraq", "Baghdad"],
  ["Ireland", "Dublin"],
  ["Israel", "Jerusalem"],
  ["Italy", "Rome"],
  ["Jamaica", "Kingston"],
  ["Japan", "Tokyo"],
  ["Jordan", "Amman"],
  ["Kazakhstan", "Nur-Sultan"],
  ["Kenya", "Nairobi"],
  ["Kiribati", "South Tarawa"],
  ["Kuwait", "Kuwait City"],
  ["Kyrgyzstan", "Bishkek"],
  ["Laos", "Vientiane"],
  ["Latvia", "Riga"],
  ["Lebanon", "Beirut"],
  ["Lesotho", "Maseru"],
  ["Liberia", "Monrovia"],
  ["Libya", "Tripoli"],
  ["Liechtenstein", "Vaduz"],
  ["Lithuania", "Vilnius"],
  ["Madagascar", "Antananarivo"],
  ["Malawi", "Lilongwe"],
  ["Malaysia", "Kuala Lumpur"],
  ["Maldives", "MalÃ©"],
  ["Mali", "Bamako"],
  ["Malta", "Valletta"],
  ["Mauritania", "Nouakchott"],
  ["Mauritius", "Port Louis"],
  ["Mexico", "Mexico City"],
];

const connectedFourWords = [
  ["Cinnamon", "Nutmeg", "Ginger", "Allspice"],
  ["Guitar", "Drums", "Piano", "Violin"],
  ["Mercury", "Venus", "Earth", "Mars"],
  ["Monday", "Tuesday", "Friday", "Sunday"],
  ["Black", "White", "Grey", "Navy Blue"],
  ["Sun", "Rain", "Wind", "Snow"],
  ["Hand", "Foot", "Ear", "Eye"],
  ["Apple", "Orange", "Banana", "Grape"],
  ["Math", "English", "Science", "History"],
  ["Car", "Bus", "Train", "Airplane"],
  ["Phone", "Laptop", "Headset", "Charger"],
  ["Pen", "Pencil", "Eraser", "Notebook"],
  ["Scarf", "Hat", "Gloves", "Boots"],
  ["Ruler", "Scissors", "Calculator", "Glue"],
];

const connectedThreeWords = [
  ["Basil", "Thyme", "Rosemary"],
  ["Latte", "Cappuccino", "Espresso"],
  ["Octopus", "Dolphin", "Seahorse"],
  ["Beach", "Mountain", "Forest"],
  ["Paintbrush", "Canvas", "Palette"],
  ["Rock", "Pop", "Jazz"],
  ["Running", "Yoga", "Dancing"],
  ["Volcano", "Canyon", "Ocean"],
  ["Phone", "Email", "Letter"],
  ["Flood", "Earthquake", "Hurricane"],
  ["Sight", "Smell", "Taste"],
  ["Past", "Present", "Future"],
  ["Literature", "History", "Biology"],
  ["Spring", "Summer", "Autumn"],
  ["Basketball", "Jersey", "Whistle"],
  ["Textbook", "Notebook", "Pencil"],
  ["Spoon", "Fork", "Knife"],
  ["Shirt", "Pants", "Shoes"],
  ["Lion", "Elephant", "Giraffe"],
  ["Sunflower", "Rose", "Daisy"],
  ["Cucumber", "Tomato", "Carrot"],
  ["Tea", "Coffee", "Juice"],
  ["Milk", "Yogurt", "Cheese"],
  ["Pikachu", "Charmander", "Squirtle"],
  ["Batman", "Superman", "Spiderman"],
  ["Elsa", "Anna", "Olaf"],
];

function WorldConnect() {
  const [groupSize, setGroupSize] = useState("2");
  const [itemCount, setItemCount] = useState("8");
  const [columns, setColumns] = useState("4");
  const [selectedWords, setSelectedWords] = useState([]);
  const [checkMatch, setCheckMatch] = useState(false);
  const [processing, setProcessing] = useState(false);

  const [itemsGroup, setItemsGroup] = useState(
    connectedTwoWords.slice(0, itemCount)
  );
  const [allItems, setAllItems] = useState(
    connectedTwoWords
      .slice(0, itemCount)
      .flat()
      .sort(() => Math.random() - 0.5)
  );

  async function handleWordClick(item) {
    if (selectedWords.length < groupSize - 1) {
      setSelectedWords((prev) => [...prev, item]);
    }
    if (selectedWords.length == groupSize - 1) {
      setProcessing(true);
      const fullSelection = [...selectedWords, item];
      setSelectedWords(fullSelection);

      if (checkMatching(fullSelection)) {
        setCheckMatch(true);
        await new Promise((res) => setTimeout(res, 500));

        setAllItems((prevAllItems) =>
          prevAllItems.filter((newItem) => !fullSelection.includes(newItem))
        );

        setSelectedWords([]);
        setCheckMatch(false);
      } else {
        true;
        await new Promise((res) => setTimeout(res, 500));
        setSelectedWords([]);
        false;
      }

      setProcessing(false);
    }
  }

  function checkMatching(selectedWords) {
    const sortedSelected = [...selectedWords].sort((a, b) =>
      a.localeCompare(b)
    );
    return itemsGroup.some((itemGroup) => {
      const sortedItemGroup = [...itemGroup].sort((a, b) => a.localeCompare(b));

      return (
        sortedItemGroup.length === sortedSelected.length &&
        sortedItemGroup.every((val, index) => val === sortedSelected[index])
      );
    });
  }

  useEffect(() => {
    if (groupSize == 2) {
      setItemsGroup(connectedTwoWords.slice(0, itemCount));
      setAllItems(
        connectedTwoWords
          .slice(0, itemCount)
          .flat()
          .sort(() => Math.random() - 0.5)
      );
    }
    if (groupSize == 3) {
      setItemsGroup(connectedThreeWords.slice(0, itemCount));
      setAllItems(
        connectedThreeWords
          .slice(0, itemCount)
          .flat()
          .sort(() => Math.random() - 0.5)
      );
    }
    if (groupSize == 4) {
      setItemsGroup(connectedFourWords.slice(0, itemCount));
      setAllItems(
        connectedFourWords
          .slice(0, itemCount)
          .flat()
          .sort(() => Math.random() - 0.5)
      );
    }
  }, [groupSize, itemCount]);

  return (
    <>
      <h1 className="text-center text-xl font-bold pt-2 pb-2 shadow-lg">
        Word Connect
      </h1>

      <div className="w-[fit-content] mx-auto mt-10 mb-5 flex gap-10 items-center justify-center">
        <div className="flex gap-4 items-center">
          <label htmlFor="group-size">Group Size</label>
          <input
            type="range"
            name="group-size"
            min="2"
            max="4"
            value={groupSize}
            onChange={(e) => setGroupSize(e.target.value)}
          />
          <p>{groupSize}</p>
        </div>

        <div className="flex gap-4 items-center">
          <label htmlFor="item-count">Item Count</label>
          <input
            type="range"
            name="item-count"
            min="4"
            max="12"
            value={itemCount}
            onChange={(e) => setItemCount(e.target.value)}
          />
          <p>{itemCount}</p>
        </div>

        <div className="flex gap-4 items-center">
          <label htmlFor="columns">Columns</label>
          <input
            type="range"
            name="columns"
            min="2"
            max="4"
            value={columns}
            onChange={(e) => setColumns(e.target.value)}
          />
          <p>{columns}</p>
        </div>
      </div>

      <div
        className={`w-[fit-content] mx-auto mt-5 grid ${
          columns === "4" && "grid-cols-4"
        } ${columns === "2" && "grid-cols-2"} ${
          columns === "3" && "grid-cols-3"
        } gap-3`}
        style={{
          pointerEvents: processing ? "none" : "auto",
        }}
      >
        {allItems.map((item, index) => (
          <div
            key={index}
            className={`w-[320px] pt-1 pb-1 flex justify-center items-center border-2 rounded-sm ${
              selectedWords.includes(item)
                ? processing
                  ? checkMatch
                    ? "bg-green-500"
                    : "bg-red-500"
                  : "bg-blue-600"
                : "bg-slate-300"
            }`}
            onClick={() => {
              handleWordClick(item);
            }}
          >
            {item}
          </div>
        ))}
      </div>
      <div className="text-center mt-10 font-bold">Attempts :0</div>
    </>
  );
}

export default WorldConnect;
